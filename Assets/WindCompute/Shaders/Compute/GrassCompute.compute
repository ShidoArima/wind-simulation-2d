#pragma kernel InitializeGrass

#include "../Include/Simplex.cginc"

#define PI 3.14159265358979323846

StructuredBuffer<float3> _GrassPositionBuffer;
StructuredBuffer<float3> _EffectorBuffer; // xy - position, z - radius

RWStructuredBuffer<float4x4> _GrassMatrixBuffer;

RWStructuredBuffer<float> _WindBuffer;

Texture2D<float> _EffectorMap;
SamplerState sampler_EffectorMap;

uint _Dimension;
float _Time;
float3 _Scale;
float4 _HeightRange; //xy - Range, z - Frequency
float4x4 _EffectorMatrix;
float4x4 _ObjectToWorld;

float4x4 GetRotationMatrix(float angle)
{
    const float4x4 R = float4x4(
        cos(angle), -sin(angle), 0, 0,
        sin(angle), cos(angle), 0, 0,
        0, 0, 1, 0,
        0, 0, 0, 1
    );

    return R;
}

float4x4 GetTranslationMatrix(float3 position)
{
    const float4x4 T = float4x4(
        1, 0, 0, position.x,
        0, 1, 0, position.y,
        0, 0, 1, position.z,
        0, 0, 0, 1
    );

    return T;
}

float4x4 GetScaleMatrix(float3 scale)
{
    const float4x4 S = float4x4(
        scale.x, 0, 0, 0,
        0, scale.y, 0, 0,
        0, 0, scale.z, 0,
        0, 0, 0, 1
    );

    return S;
}

float GetWind(float3 position)
{
    float4 uv = mul(_EffectorMatrix, float4(position, 1));
    const float displacement = -_EffectorMap.SampleLevel(sampler_EffectorMap, uv.xy, 0).x;
    return displacement;
}

[numthreads(64,1,1)]
void InitializeGrass(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _Dimension && id.y >= _Dimension)
    {
        return;
    }

    uint index = id.x + id.y * _Dimension;
    float3 pos = _GrassPositionBuffer[id.x];

    const float height = (snoise(float3(pos.xy, 0) * _HeightRange.z) + 1) * 0.5f;
    float3 scale = float3(_Scale.x, _Scale.y * lerp(_HeightRange.x, _HeightRange.y, height), _Scale.z);
    float3 position = float3(pos.x, pos.y - (1 - scale.y) * 0.5f, 0);
    position = mul(_ObjectToWorld, float4(position, 1)).xyz;
    float angle = pos.z;

    const float4x4 T = GetTranslationMatrix(position);
    const float4x4 R = GetRotationMatrix(angle);
    const float4x4 S = GetScaleMatrix(scale * float3(_ObjectToWorld[0].x, _ObjectToWorld[1].y, _ObjectToWorld[2].z));

    _WindBuffer[index] = GetWind(position);
    _GrassMatrixBuffer[index] = mul(mul(T, R), S);
}
